// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vpnsvc.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package vpnsvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CleanExpiredVpnLinkRequest struct {
	EndTime int64 `protobuf:"varint,1,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *CleanExpiredVpnLinkRequest) Reset()         { *m = CleanExpiredVpnLinkRequest{} }
func (m *CleanExpiredVpnLinkRequest) String() string { return proto.CompactTextString(m) }
func (*CleanExpiredVpnLinkRequest) ProtoMessage()    {}
func (*CleanExpiredVpnLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{0}
}
func (m *CleanExpiredVpnLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CleanExpiredVpnLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CleanExpiredVpnLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CleanExpiredVpnLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanExpiredVpnLinkRequest.Merge(m, src)
}
func (m *CleanExpiredVpnLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *CleanExpiredVpnLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanExpiredVpnLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CleanExpiredVpnLinkRequest proto.InternalMessageInfo

func (m *CleanExpiredVpnLinkRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type CleanExpiredVpnLinkResponse struct {
	Code  uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CleanExpiredVpnLinkResponse) Reset()         { *m = CleanExpiredVpnLinkResponse{} }
func (m *CleanExpiredVpnLinkResponse) String() string { return proto.CompactTextString(m) }
func (*CleanExpiredVpnLinkResponse) ProtoMessage()    {}
func (*CleanExpiredVpnLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{1}
}
func (m *CleanExpiredVpnLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CleanExpiredVpnLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CleanExpiredVpnLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CleanExpiredVpnLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanExpiredVpnLinkResponse.Merge(m, src)
}
func (m *CleanExpiredVpnLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *CleanExpiredVpnLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanExpiredVpnLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CleanExpiredVpnLinkResponse proto.InternalMessageInfo

func (m *CleanExpiredVpnLinkResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CleanExpiredVpnLinkResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type VerifyOrderFromChainRequest struct {
	Chain      string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	StartBlock int64  `protobuf:"varint,2,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
}

func (m *VerifyOrderFromChainRequest) Reset()         { *m = VerifyOrderFromChainRequest{} }
func (m *VerifyOrderFromChainRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyOrderFromChainRequest) ProtoMessage()    {}
func (*VerifyOrderFromChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{2}
}
func (m *VerifyOrderFromChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyOrderFromChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyOrderFromChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyOrderFromChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyOrderFromChainRequest.Merge(m, src)
}
func (m *VerifyOrderFromChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyOrderFromChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyOrderFromChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyOrderFromChainRequest proto.InternalMessageInfo

func (m *VerifyOrderFromChainRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *VerifyOrderFromChainRequest) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

type VerifyOrderFromChainResponse struct {
	Code  uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VerifyOrderFromChainResponse) Reset()         { *m = VerifyOrderFromChainResponse{} }
func (m *VerifyOrderFromChainResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyOrderFromChainResponse) ProtoMessage()    {}
func (*VerifyOrderFromChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{3}
}
func (m *VerifyOrderFromChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyOrderFromChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyOrderFromChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyOrderFromChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyOrderFromChainResponse.Merge(m, src)
}
func (m *VerifyOrderFromChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyOrderFromChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyOrderFromChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyOrderFromChainResponse proto.InternalMessageInfo

func (m *VerifyOrderFromChainResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *VerifyOrderFromChainResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetServerListRequest struct {
	EthAddress string `protobuf:"bytes,1,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
}

func (m *GetServerListRequest) Reset()         { *m = GetServerListRequest{} }
func (m *GetServerListRequest) String() string { return proto.CompactTextString(m) }
func (*GetServerListRequest) ProtoMessage()    {}
func (*GetServerListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{4}
}
func (m *GetServerListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServerListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerListRequest.Merge(m, src)
}
func (m *GetServerListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServerListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerListRequest proto.InternalMessageInfo

func (m *GetServerListRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type GetServerListItem struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetServerListItem) Reset()         { *m = GetServerListItem{} }
func (m *GetServerListItem) String() string { return proto.CompactTextString(m) }
func (*GetServerListItem) ProtoMessage()    {}
func (*GetServerListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{5}
}
func (m *GetServerListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServerListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerListItem.Merge(m, src)
}
func (m *GetServerListItem) XXX_Size() int {
	return m.Size()
}
func (m *GetServerListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerListItem.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerListItem proto.InternalMessageInfo

func (m *GetServerListItem) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetServerListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetServerListResult struct {
	Servers []*GetServerListItem `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (m *GetServerListResult) Reset()         { *m = GetServerListResult{} }
func (m *GetServerListResult) String() string { return proto.CompactTextString(m) }
func (*GetServerListResult) ProtoMessage()    {}
func (*GetServerListResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{6}
}
func (m *GetServerListResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerListResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerListResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServerListResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerListResult.Merge(m, src)
}
func (m *GetServerListResult) XXX_Size() int {
	return m.Size()
}
func (m *GetServerListResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerListResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerListResult proto.InternalMessageInfo

func (m *GetServerListResult) GetServers() []*GetServerListItem {
	if m != nil {
		return m.Servers
	}
	return nil
}

type GetServerListResponse struct {
	Code  uint64               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data  *GetServerListResult `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Error string               `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *GetServerListResponse) Reset()         { *m = GetServerListResponse{} }
func (m *GetServerListResponse) String() string { return proto.CompactTextString(m) }
func (*GetServerListResponse) ProtoMessage()    {}
func (*GetServerListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{7}
}
func (m *GetServerListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServerListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerListResponse.Merge(m, src)
}
func (m *GetServerListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetServerListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerListResponse proto.InternalMessageInfo

func (m *GetServerListResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetServerListResponse) GetData() *GetServerListResult {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetServerListResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetServerLinkRequest struct {
	EthAddress string `protobuf:"bytes,1,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	Server     string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (m *GetServerLinkRequest) Reset()         { *m = GetServerLinkRequest{} }
func (m *GetServerLinkRequest) String() string { return proto.CompactTextString(m) }
func (*GetServerLinkRequest) ProtoMessage()    {}
func (*GetServerLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{8}
}
func (m *GetServerLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServerLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerLinkRequest.Merge(m, src)
}
func (m *GetServerLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServerLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerLinkRequest proto.InternalMessageInfo

func (m *GetServerLinkRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *GetServerLinkRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

type GetServerLinkResponse struct {
	Code  uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *GetServerLinkResponse) Reset()         { *m = GetServerLinkResponse{} }
func (m *GetServerLinkResponse) String() string { return proto.CompactTextString(m) }
func (*GetServerLinkResponse) ProtoMessage()    {}
func (*GetServerLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{9}
}
func (m *GetServerLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServerLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServerLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServerLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerLinkResponse.Merge(m, src)
}
func (m *GetServerLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetServerLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerLinkResponse proto.InternalMessageInfo

func (m *GetServerLinkResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetServerLinkResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *GetServerLinkResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type VpnInfoRequest struct {
	EthAddress string `protobuf:"bytes,1,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
}

func (m *VpnInfoRequest) Reset()         { *m = VpnInfoRequest{} }
func (m *VpnInfoRequest) String() string { return proto.CompactTextString(m) }
func (*VpnInfoRequest) ProtoMessage()    {}
func (*VpnInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{10}
}
func (m *VpnInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VpnInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VpnInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VpnInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnInfoRequest.Merge(m, src)
}
func (m *VpnInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *VpnInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VpnInfoRequest proto.InternalMessageInfo

func (m *VpnInfoRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type Subscription struct {
	ExpireTime string `protobuf:"bytes,1,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{11}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return m.Size()
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

type VpnOrder struct {
	OrderId    string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Amount     string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Chain      string `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	Token      string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	TxnHash    string `protobuf:"bytes,6,opt,name=txnHash,proto3" json:"txnHash,omitempty"`
	CreateTime string `protobuf:"bytes,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (m *VpnOrder) Reset()         { *m = VpnOrder{} }
func (m *VpnOrder) String() string { return proto.CompactTextString(m) }
func (*VpnOrder) ProtoMessage()    {}
func (*VpnOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{12}
}
func (m *VpnOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VpnOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VpnOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VpnOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnOrder.Merge(m, src)
}
func (m *VpnOrder) XXX_Size() int {
	return m.Size()
}
func (m *VpnOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnOrder.DiscardUnknown(m)
}

var xxx_messageInfo_VpnOrder proto.InternalMessageInfo

func (m *VpnOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *VpnOrder) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *VpnOrder) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *VpnOrder) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *VpnOrder) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *VpnOrder) GetTxnHash() string {
	if m != nil {
		return m.TxnHash
	}
	return ""
}

func (m *VpnOrder) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

type VpnInfoResult struct {
	Status       uint64        `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Subscription *Subscription `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	Orders       []*VpnOrder   `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *VpnInfoResult) Reset()         { *m = VpnInfoResult{} }
func (m *VpnInfoResult) String() string { return proto.CompactTextString(m) }
func (*VpnInfoResult) ProtoMessage()    {}
func (*VpnInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{13}
}
func (m *VpnInfoResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VpnInfoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VpnInfoResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VpnInfoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnInfoResult.Merge(m, src)
}
func (m *VpnInfoResult) XXX_Size() int {
	return m.Size()
}
func (m *VpnInfoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnInfoResult.DiscardUnknown(m)
}

var xxx_messageInfo_VpnInfoResult proto.InternalMessageInfo

func (m *VpnInfoResult) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *VpnInfoResult) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *VpnInfoResult) GetOrders() []*VpnOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type VpnInfoResponse struct {
	Code  uint64         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data  *VpnInfoResult `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Error string         `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VpnInfoResponse) Reset()         { *m = VpnInfoResponse{} }
func (m *VpnInfoResponse) String() string { return proto.CompactTextString(m) }
func (*VpnInfoResponse) ProtoMessage()    {}
func (*VpnInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{14}
}
func (m *VpnInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VpnInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VpnInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VpnInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnInfoResponse.Merge(m, src)
}
func (m *VpnInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *VpnInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VpnInfoResponse proto.InternalMessageInfo

func (m *VpnInfoResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *VpnInfoResponse) GetData() *VpnInfoResult {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VpnInfoResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type FetchOrdersRequest struct {
	EthAddress string `protobuf:"bytes,1,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
}

func (m *FetchOrdersRequest) Reset()         { *m = FetchOrdersRequest{} }
func (m *FetchOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*FetchOrdersRequest) ProtoMessage()    {}
func (*FetchOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{15}
}
func (m *FetchOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchOrdersRequest.Merge(m, src)
}
func (m *FetchOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchOrdersRequest proto.InternalMessageInfo

func (m *FetchOrdersRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type FetchOrdersResult struct {
	Orders []*VpnOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *FetchOrdersResult) Reset()         { *m = FetchOrdersResult{} }
func (m *FetchOrdersResult) String() string { return proto.CompactTextString(m) }
func (*FetchOrdersResult) ProtoMessage()    {}
func (*FetchOrdersResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{16}
}
func (m *FetchOrdersResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchOrdersResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchOrdersResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchOrdersResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchOrdersResult.Merge(m, src)
}
func (m *FetchOrdersResult) XXX_Size() int {
	return m.Size()
}
func (m *FetchOrdersResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchOrdersResult.DiscardUnknown(m)
}

var xxx_messageInfo_FetchOrdersResult proto.InternalMessageInfo

func (m *FetchOrdersResult) GetOrders() []*VpnOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type FetchOrdersResponse struct {
	Code  uint64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data  *FetchOrdersResult `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Error string             `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *FetchOrdersResponse) Reset()         { *m = FetchOrdersResponse{} }
func (m *FetchOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*FetchOrdersResponse) ProtoMessage()    {}
func (*FetchOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{17}
}
func (m *FetchOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchOrdersResponse.Merge(m, src)
}
func (m *FetchOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchOrdersResponse proto.InternalMessageInfo

func (m *FetchOrdersResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FetchOrdersResponse) GetData() *FetchOrdersResult {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FetchOrdersResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type FetchOrderInfoRequest struct {
	EthAddress string `protobuf:"bytes,1,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	OrderId    string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *FetchOrderInfoRequest) Reset()         { *m = FetchOrderInfoRequest{} }
func (m *FetchOrderInfoRequest) String() string { return proto.CompactTextString(m) }
func (*FetchOrderInfoRequest) ProtoMessage()    {}
func (*FetchOrderInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{18}
}
func (m *FetchOrderInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchOrderInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchOrderInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchOrderInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchOrderInfoRequest.Merge(m, src)
}
func (m *FetchOrderInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchOrderInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchOrderInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchOrderInfoRequest proto.InternalMessageInfo

func (m *FetchOrderInfoRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *FetchOrderInfoRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type FetchOrderInfoResponse struct {
	Code  uint64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data  *VpnOrder `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Error string    `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *FetchOrderInfoResponse) Reset()         { *m = FetchOrderInfoResponse{} }
func (m *FetchOrderInfoResponse) String() string { return proto.CompactTextString(m) }
func (*FetchOrderInfoResponse) ProtoMessage()    {}
func (*FetchOrderInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{19}
}
func (m *FetchOrderInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchOrderInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchOrderInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchOrderInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchOrderInfoResponse.Merge(m, src)
}
func (m *FetchOrderInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchOrderInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchOrderInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchOrderInfoResponse proto.InternalMessageInfo

func (m *FetchOrderInfoResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FetchOrderInfoResponse) GetData() *VpnOrder {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FetchOrderInfoResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CreateOrderResult struct {
	OrderId string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *CreateOrderResult) Reset()         { *m = CreateOrderResult{} }
func (m *CreateOrderResult) String() string { return proto.CompactTextString(m) }
func (*CreateOrderResult) ProtoMessage()    {}
func (*CreateOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{20}
}
func (m *CreateOrderResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrderResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderResult.Merge(m, src)
}
func (m *CreateOrderResult) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderResult.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderResult proto.InternalMessageInfo

func (m *CreateOrderResult) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type CreateOrderRequest struct {
	EthAddress string `protobuf:"bytes,1,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	ChainId    uint64 `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	PlanId     uint64 `protobuf:"varint,3,opt,name=planId,proto3" json:"planId,omitempty"`
}

func (m *CreateOrderRequest) Reset()         { *m = CreateOrderRequest{} }
func (m *CreateOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrderRequest) ProtoMessage()    {}
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{21}
}
func (m *CreateOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderRequest.Merge(m, src)
}
func (m *CreateOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderRequest proto.InternalMessageInfo

func (m *CreateOrderRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *CreateOrderRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *CreateOrderRequest) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

type CreateOrderResponse struct {
	Code  uint64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data  *CreateOrderResult `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Error string             `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CreateOrderResponse) Reset()         { *m = CreateOrderResponse{} }
func (m *CreateOrderResponse) String() string { return proto.CompactTextString(m) }
func (*CreateOrderResponse) ProtoMessage()    {}
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{22}
}
func (m *CreateOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderResponse.Merge(m, src)
}
func (m *CreateOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderResponse proto.InternalMessageInfo

func (m *CreateOrderResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateOrderResponse) GetData() *CreateOrderResult {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateOrderResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UpdateOrderResult struct {
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *UpdateOrderResult) Reset()         { *m = UpdateOrderResult{} }
func (m *UpdateOrderResult) String() string { return proto.CompactTextString(m) }
func (*UpdateOrderResult) ProtoMessage()    {}
func (*UpdateOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{23}
}
func (m *UpdateOrderResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrderResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrderResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrderResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrderResult.Merge(m, src)
}
func (m *UpdateOrderResult) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrderResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrderResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrderResult proto.InternalMessageInfo

func (m *UpdateOrderResult) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type UpdateOrderRequest struct {
	EthAddress string `protobuf:"bytes,1,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	OrderId    string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	TxnHash    string `protobuf:"bytes,3,opt,name=txnHash,proto3" json:"txnHash,omitempty"`
}

func (m *UpdateOrderRequest) Reset()         { *m = UpdateOrderRequest{} }
func (m *UpdateOrderRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOrderRequest) ProtoMessage()    {}
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{24}
}
func (m *UpdateOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrderRequest.Merge(m, src)
}
func (m *UpdateOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrderRequest proto.InternalMessageInfo

func (m *UpdateOrderRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *UpdateOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *UpdateOrderRequest) GetTxnHash() string {
	if m != nil {
		return m.TxnHash
	}
	return ""
}

type UpdateOrderResponse struct {
	Code  uint64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data  *UpdateOrderResult `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Error string             `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *UpdateOrderResponse) Reset()         { *m = UpdateOrderResponse{} }
func (m *UpdateOrderResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateOrderResponse) ProtoMessage()    {}
func (*UpdateOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ab4ab7bd676c232, []int{25}
}
func (m *UpdateOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrderResponse.Merge(m, src)
}
func (m *UpdateOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrderResponse proto.InternalMessageInfo

func (m *UpdateOrderResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateOrderResponse) GetData() *UpdateOrderResult {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateOrderResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*CleanExpiredVpnLinkRequest)(nil), "vpnsvc.CleanExpiredVpnLinkRequest")
	proto.RegisterType((*CleanExpiredVpnLinkResponse)(nil), "vpnsvc.CleanExpiredVpnLinkResponse")
	proto.RegisterType((*VerifyOrderFromChainRequest)(nil), "vpnsvc.VerifyOrderFromChainRequest")
	proto.RegisterType((*VerifyOrderFromChainResponse)(nil), "vpnsvc.VerifyOrderFromChainResponse")
	proto.RegisterType((*GetServerListRequest)(nil), "vpnsvc.GetServerListRequest")
	proto.RegisterType((*GetServerListItem)(nil), "vpnsvc.GetServerListItem")
	proto.RegisterType((*GetServerListResult)(nil), "vpnsvc.GetServerListResult")
	proto.RegisterType((*GetServerListResponse)(nil), "vpnsvc.GetServerListResponse")
	proto.RegisterType((*GetServerLinkRequest)(nil), "vpnsvc.GetServerLinkRequest")
	proto.RegisterType((*GetServerLinkResponse)(nil), "vpnsvc.GetServerLinkResponse")
	proto.RegisterType((*VpnInfoRequest)(nil), "vpnsvc.VpnInfoRequest")
	proto.RegisterType((*Subscription)(nil), "vpnsvc.Subscription")
	proto.RegisterType((*VpnOrder)(nil), "vpnsvc.VpnOrder")
	proto.RegisterType((*VpnInfoResult)(nil), "vpnsvc.VpnInfoResult")
	proto.RegisterType((*VpnInfoResponse)(nil), "vpnsvc.VpnInfoResponse")
	proto.RegisterType((*FetchOrdersRequest)(nil), "vpnsvc.FetchOrdersRequest")
	proto.RegisterType((*FetchOrdersResult)(nil), "vpnsvc.FetchOrdersResult")
	proto.RegisterType((*FetchOrdersResponse)(nil), "vpnsvc.FetchOrdersResponse")
	proto.RegisterType((*FetchOrderInfoRequest)(nil), "vpnsvc.FetchOrderInfoRequest")
	proto.RegisterType((*FetchOrderInfoResponse)(nil), "vpnsvc.FetchOrderInfoResponse")
	proto.RegisterType((*CreateOrderResult)(nil), "vpnsvc.CreateOrderResult")
	proto.RegisterType((*CreateOrderRequest)(nil), "vpnsvc.CreateOrderRequest")
	proto.RegisterType((*CreateOrderResponse)(nil), "vpnsvc.CreateOrderResponse")
	proto.RegisterType((*UpdateOrderResult)(nil), "vpnsvc.UpdateOrderResult")
	proto.RegisterType((*UpdateOrderRequest)(nil), "vpnsvc.UpdateOrderRequest")
	proto.RegisterType((*UpdateOrderResponse)(nil), "vpnsvc.UpdateOrderResponse")
}

func init() { proto.RegisterFile("vpnsvc.proto", fileDescriptor_6ab4ab7bd676c232) }

var fileDescriptor_6ab4ab7bd676c232 = []byte{
	// 1103 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x5f, 0x37, 0x6d, 0x9a, 0xbe, 0xa4, 0x59, 0x32, 0x4d, 0xdb, 0x6c, 0xb2, 0x0d, 0x2b, 0x77,
	0x11, 0x65, 0x51, 0x6b, 0xd4, 0xc2, 0x02, 0x8b, 0x38, 0xb0, 0xd5, 0xfe, 0x29, 0x5a, 0x81, 0x70,
	0xd9, 0x1c, 0x72, 0x89, 0x5c, 0x7b, 0xd2, 0x58, 0x49, 0xc6, 0x66, 0x66, 0x12, 0x6d, 0xaf, 0x5c,
	0xb9, 0x20, 0x71, 0x84, 0x4f, 0xc2, 0x27, 0xe0, 0x82, 0xb4, 0x12, 0x17, 0x8e, 0xa8, 0xe5, 0x83,
	0x20, 0xcf, 0xd8, 0xb1, 0x27, 0xb6, 0xd3, 0x56, 0xdc, 0xfc, 0xc6, 0x6f, 0xe6, 0xf7, 0xc7, 0xef,
	0x3d, 0x8d, 0xa1, 0x32, 0xf5, 0x09, 0x9b, 0xda, 0x07, 0x3e, 0xf5, 0xb8, 0x87, 0x8a, 0x32, 0x6a,
	0x3e, 0x3b, 0x77, 0xf9, 0x60, 0x72, 0x76, 0x60, 0x7b, 0x63, 0x63, 0x8c, 0xb9, 0x35, 0xc5, 0x94,
	0x61, 0x83, 0xd3, 0x09, 0x63, 0x86, 0x83, 0xfb, 0x9c, 0x62, 0x6c, 0x9c, 0x7b, 0xde, 0xf9, 0x08,
	0xf3, 0x81, 0x4b, 0x1d, 0xdf, 0xa2, 0xfc, 0xc2, 0xb0, 0x08, 0xf1, 0xb8, 0xc5, 0x5d, 0x8f, 0x30,
	0x79, 0x9c, 0xfe, 0x18, 0x9a, 0xc7, 0x23, 0x6c, 0x91, 0x67, 0x6f, 0x7c, 0x97, 0x62, 0xa7, 0xe3,
	0x93, 0x57, 0x2e, 0x19, 0x9a, 0xf8, 0x87, 0x09, 0x66, 0x1c, 0x35, 0x60, 0x15, 0x13, 0xe7, 0x7b,
	0x77, 0x8c, 0x1b, 0xda, 0x03, 0x6d, 0xaf, 0x60, 0x46, 0xa1, 0xfe, 0x02, 0x5a, 0x99, 0xfb, 0x98,
	0xef, 0x11, 0x86, 0x11, 0x82, 0x65, 0xdb, 0x73, 0xe4, 0xae, 0x65, 0x53, 0x3c, 0xa3, 0x3a, 0xac,
	0x60, 0x4a, 0x3d, 0xda, 0x58, 0x7a, 0xa0, 0xed, 0xad, 0x99, 0x32, 0xd0, 0x4f, 0xa1, 0xd5, 0xc1,
	0xd4, 0xed, 0x5f, 0x7c, 0x4b, 0x1d, 0x4c, 0x9f, 0x53, 0x6f, 0x7c, 0x3c, 0xb0, 0x5c, 0x12, 0x31,
	0xa8, 0xc3, 0x8a, 0x1d, 0xc4, 0xe2, 0xa4, 0x35, 0x53, 0x06, 0xa8, 0x0d, 0xc0, 0xb8, 0x45, 0xf9,
	0xd3, 0x91, 0x67, 0x0f, 0xc5, 0x79, 0x05, 0x33, 0xb1, 0xa2, 0xbf, 0x84, 0xfb, 0xd9, 0x87, 0xde,
	0x9a, 0xde, 0x63, 0xa8, 0xbf, 0xc0, 0xfc, 0x14, 0xd3, 0x29, 0xa6, 0xaf, 0x5c, 0xc6, 0x23, 0x5e,
	0x6d, 0x00, 0xcc, 0x07, 0x5f, 0x39, 0x0e, 0xc5, 0x8c, 0x85, 0xe4, 0x12, 0x2b, 0xfa, 0xa7, 0x50,
	0x53, 0xf6, 0x9d, 0x70, 0x3c, 0x46, 0x55, 0x58, 0x72, 0xfd, 0x30, 0x79, 0xc9, 0xf5, 0x03, 0x1a,
	0xc4, 0x1a, 0xe3, 0x10, 0x51, 0x3c, 0xeb, 0x5f, 0xc3, 0xc6, 0x1c, 0x20, 0x9b, 0x8c, 0x38, 0x3a,
	0x82, 0x55, 0x26, 0xd6, 0x02, 0xb0, 0xc2, 0x5e, 0xf9, 0xf0, 0xde, 0x41, 0x58, 0x16, 0x29, 0x18,
	0x33, 0xca, 0xd4, 0x29, 0x6c, 0xce, 0x9f, 0x95, 0xaf, 0xdf, 0x80, 0x65, 0xc7, 0xe2, 0x96, 0x20,
	0x53, 0x3e, 0x6c, 0x65, 0x1e, 0x2f, 0xc9, 0x98, 0x22, 0x31, 0x36, 0xac, 0x90, 0x34, 0xec, 0x1b,
	0xc5, 0xb0, 0xb8, 0x94, 0xae, 0x31, 0x0c, 0x6d, 0x41, 0x51, 0xd2, 0x0e, 0xdd, 0x08, 0x23, 0xfd,
	0xb5, 0xa2, 0xe1, 0x9a, 0x12, 0x43, 0x09, 0x0d, 0x6b, 0x0b, 0x69, 0x7e, 0x04, 0xd5, 0x8e, 0x4f,
	0x4e, 0x48, 0xdf, 0xbb, 0xe9, 0x17, 0x3d, 0x80, 0xca, 0xe9, 0xe4, 0x8c, 0xd9, 0xd4, 0xf5, 0x83,
	0x06, 0x12, 0xf9, 0xa2, 0xf8, 0x67, 0xed, 0x11, 0xe4, 0xcf, 0x56, 0xf4, 0xdf, 0x35, 0x28, 0x75,
	0x7c, 0x22, 0x2a, 0x30, 0x68, 0x24, 0x2f, 0x78, 0x38, 0x71, 0xc2, 0xcc, 0x28, 0x14, 0xba, 0xb9,
	0xc5, 0x27, 0x6c, 0xa6, 0x5b, 0x44, 0xc1, 0xba, 0x35, 0xf6, 0x26, 0x84, 0x87, 0xbc, 0xc3, 0x28,
	0x6e, 0x88, 0xe5, 0x64, 0x43, 0xd4, 0x61, 0x85, 0x7b, 0x43, 0x4c, 0x1a, 0x2b, 0x72, 0x55, 0x04,
	0x01, 0x2a, 0x7f, 0x43, 0x5e, 0x5a, 0x6c, 0xd0, 0x28, 0x4a, 0xd4, 0x30, 0x0c, 0xc8, 0xdb, 0x14,
	0x5b, 0x5c, 0x92, 0x5f, 0x95, 0xe4, 0xe3, 0x15, 0xfd, 0x27, 0x0d, 0xd6, 0x67, 0xfe, 0x88, 0x02,
	0x8c, 0x79, 0x4a, 0xc3, 0x23, 0x9e, 0x9f, 0x41, 0x85, 0x25, 0x6c, 0x09, 0xcb, 0xa7, 0x1e, 0x95,
	0x4f, 0xd2, 0x32, 0x53, 0xc9, 0x44, 0x7b, 0x50, 0x14, 0x26, 0xb0, 0x46, 0x41, 0x54, 0xf4, 0x3b,
	0xd1, 0x9e, 0xc8, 0x35, 0x33, 0x7c, 0xaf, 0xf7, 0xe1, 0x6e, 0x4c, 0x26, 0xff, 0xeb, 0x7f, 0xa0,
	0x54, 0xf0, 0x66, 0xe2, 0xb8, 0x58, 0xc7, 0xc2, 0xa2, 0xf8, 0x18, 0xd0, 0x73, 0xcc, 0xed, 0x81,
	0x40, 0x67, 0x37, 0x2d, 0x8c, 0x2f, 0xa1, 0xa6, 0xec, 0x12, 0x76, 0xc5, 0xe2, 0xb4, 0x6b, 0xc4,
	0x11, 0xd8, 0x50, 0xb7, 0xe7, 0x0b, 0xdc, 0x57, 0x04, 0xce, 0x26, 0x40, 0x0a, 0x7d, 0xa1, 0xc8,
	0xef, 0x60, 0x33, 0xde, 0x70, 0x8b, 0x06, 0x48, 0xd6, 0xf0, 0x92, 0x52, 0xc3, 0xfa, 0x00, 0xb6,
	0xe6, 0x8f, 0x5c, 0xa0, 0xe2, 0xa1, 0xa2, 0x22, 0x6d, 0xcc, 0x22, 0xf2, 0xfb, 0x50, 0x3b, 0x16,
	0x55, 0x2a, 0x53, 0xa5, 0xd7, 0xb9, 0xcd, 0xa5, 0xf7, 0x01, 0x29, 0xe9, 0x37, 0x16, 0x2a, 0xba,
	0x2a, 0x14, 0xba, 0x6c, 0x46, 0x61, 0xd0, 0x04, 0xfe, 0xc8, 0x0a, 0x5e, 0x14, 0x64, 0x13, 0xc8,
	0x28, 0xf8, 0x86, 0x2a, 0xad, 0x5b, 0x7f, 0xc3, 0x94, 0xaa, 0x85, 0x36, 0x7c, 0x08, 0xb5, 0xd7,
	0xbe, 0x33, 0x67, 0x83, 0xda, 0xa1, 0xa5, 0xa8, 0x43, 0xf5, 0x01, 0x20, 0x25, 0xf9, 0x7f, 0x7e,
	0xed, 0xe4, 0x54, 0x29, 0x28, 0x53, 0x25, 0xb0, 0x41, 0xa5, 0x75, 0x6b, 0x1b, 0x52, 0xaa, 0x16,
	0xd9, 0x70, 0xf8, 0x67, 0x09, 0x8a, 0x1d, 0xb1, 0x11, 0x4d, 0xa0, 0x9c, 0xb0, 0x10, 0x35, 0x33,
	0x7d, 0x15, 0xca, 0x9b, 0xad, 0x6c, 0xcf, 0x05, 0x57, 0x7d, 0xff, 0xc7, 0xbf, 0xfe, 0xfd, 0x65,
	0xe9, 0x7d, 0x7d, 0xdd, 0x10, 0x72, 0x0d, 0x39, 0x13, 0x9f, 0x68, 0x8f, 0xba, 0x1b, 0x7a, 0x55,
	0x59, 0x33, 0x9e, 0x68, 0x8f, 0x02, 0xd8, 0x04, 0xe5, 0x18, 0x36, 0x6d, 0x78, 0x0c, 0x9b, 0x61,
	0x51, 0x0a, 0x76, 0x22, 0x72, 0x54, 0x58, 0xb9, 0x26, 0x60, 0x4f, 0x61, 0x35, 0x9c, 0x6a, 0x68,
	0x2b, 0x35, 0xe6, 0x24, 0xdc, 0x76, 0x7a, 0xfc, 0x49, 0xa8, 0x6d, 0x01, 0x55, 0x43, 0x2b, 0x86,
	0x4b, 0xfa, 0x5e, 0xb7, 0x84, 0x8a, 0xe2, 0xc1, 0x40, 0x36, 0x94, 0x13, 0x93, 0x24, 0xd6, 0x92,
	0x1e, 0x89, 0xb1, 0x96, 0x8c, 0xc9, 0xa5, 0xb7, 0x04, 0xc0, 0x26, 0x5a, 0x95, 0xbc, 0x59, 0x17,
	0x50, 0x29, 0x7c, 0x34, 0x10, 0x87, 0xaa, 0x3a, 0x2a, 0xd0, 0x4e, 0xfa, 0xac, 0xa4, 0x8e, 0x76,
	0xde, 0xeb, 0x10, 0x6d, 0x57, 0xa0, 0xed, 0xa0, 0xb2, 0x84, 0xe8, 0x09, 0x51, 0x55, 0x54, 0x49,
	0x84, 0x06, 0x62, 0xb0, 0xae, 0xdc, 0x63, 0xd0, 0xfd, 0x9c, 0xeb, 0x8d, 0xc4, 0xdc, 0xc9, 0xbb,
	0xfc, 0x48, 0xc8, 0xf7, 0x04, 0xe4, 0xbb, 0xa8, 0x62, 0xc8, 0x3b, 0x4a, 0x6f, 0xe4, 0x32, 0xde,
	0xbd, 0x8b, 0xd6, 0x93, 0xf1, 0x3c, 0x28, 0x19, 0x66, 0x82, 0xce, 0x2e, 0x48, 0x99, 0xa0, 0xf1,
	0x75, 0x27, 0x0b, 0x94, 0x0c, 0x55, 0x50, 0x32, 0x34, 0xd0, 0x6f, 0x1a, 0xd4, 0xb3, 0xae, 0xbe,
	0x68, 0x77, 0x56, 0x0f, 0xf9, 0xb7, 0xed, 0xe6, 0xc3, 0xc5, 0x49, 0x21, 0x95, 0xcf, 0x05, 0x95,
	0x23, 0xb4, 0x65, 0xb0, 0x0b, 0x62, 0xf7, 0xa4, 0xd1, 0x7d, 0xea, 0x8d, 0x7b, 0x62, 0x4e, 0x76,
	0xef, 0xa1, 0xed, 0xec, 0x37, 0x06, 0xfa, 0x55, 0x83, 0x8d, 0x8c, 0xff, 0x06, 0xa4, 0xcf, 0x7a,
	0x32, 0xf7, 0x67, 0xa4, 0xb9, 0xbb, 0x30, 0x27, 0xe4, 0xf6, 0x85, 0xe0, 0xf6, 0x09, 0xda, 0x36,
	0xec, 0x20, 0xab, 0x27, 0x2f, 0x64, 0x4e, 0x6f, 0xea, 0x13, 0xe9, 0x58, 0x13, 0x35, 0x72, 0x5e,
	0x19, 0x4f, 0x1b, 0x7f, 0x5c, 0xb6, 0xb5, 0xb7, 0x97, 0x6d, 0xed, 0x9f, 0xcb, 0xb6, 0xf6, 0xf3,
	0x55, 0xfb, 0xce, 0xdb, 0xab, 0xf6, 0x9d, 0xbf, 0xaf, 0xda, 0x77, 0xce, 0x8a, 0xe2, 0x6f, 0xe9,
	0xe8, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0xb7, 0x9d, 0xbd, 0x8c, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VpnsvcClient is the client API for Vpnsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VpnsvcClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
	VpnInfo(ctx context.Context, in *VpnInfoRequest, opts ...grpc.CallOption) (*VpnInfoResponse, error)
	FetchOrders(ctx context.Context, in *FetchOrdersRequest, opts ...grpc.CallOption) (*FetchOrdersResponse, error)
	FetchOrderInfo(ctx context.Context, in *FetchOrderInfoRequest, opts ...grpc.CallOption) (*FetchOrderInfoResponse, error)
	GetServerList(ctx context.Context, in *GetServerListRequest, opts ...grpc.CallOption) (*GetServerListResponse, error)
	GetServerLink(ctx context.Context, in *GetServerLinkRequest, opts ...grpc.CallOption) (*GetServerLinkResponse, error)
	VerifyOrderFromChain(ctx context.Context, in *VerifyOrderFromChainRequest, opts ...grpc.CallOption) (*VerifyOrderFromChainResponse, error)
	CleanExpiredVpnLink(ctx context.Context, in *CleanExpiredVpnLinkRequest, opts ...grpc.CallOption) (*CleanExpiredVpnLinkResponse, error)
}

type vpnsvcClient struct {
	cc *grpc.ClientConn
}

func NewVpnsvcClient(cc *grpc.ClientConn) VpnsvcClient {
	return &vpnsvcClient{cc}
}

func (c *vpnsvcClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnsvcClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	out := new(UpdateOrderResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnsvcClient) VpnInfo(ctx context.Context, in *VpnInfoRequest, opts ...grpc.CallOption) (*VpnInfoResponse, error) {
	out := new(VpnInfoResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/VpnInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnsvcClient) FetchOrders(ctx context.Context, in *FetchOrdersRequest, opts ...grpc.CallOption) (*FetchOrdersResponse, error) {
	out := new(FetchOrdersResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/FetchOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnsvcClient) FetchOrderInfo(ctx context.Context, in *FetchOrderInfoRequest, opts ...grpc.CallOption) (*FetchOrderInfoResponse, error) {
	out := new(FetchOrderInfoResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/FetchOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnsvcClient) GetServerList(ctx context.Context, in *GetServerListRequest, opts ...grpc.CallOption) (*GetServerListResponse, error) {
	out := new(GetServerListResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/GetServerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnsvcClient) GetServerLink(ctx context.Context, in *GetServerLinkRequest, opts ...grpc.CallOption) (*GetServerLinkResponse, error) {
	out := new(GetServerLinkResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/GetServerLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnsvcClient) VerifyOrderFromChain(ctx context.Context, in *VerifyOrderFromChainRequest, opts ...grpc.CallOption) (*VerifyOrderFromChainResponse, error) {
	out := new(VerifyOrderFromChainResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/VerifyOrderFromChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnsvcClient) CleanExpiredVpnLink(ctx context.Context, in *CleanExpiredVpnLinkRequest, opts ...grpc.CallOption) (*CleanExpiredVpnLinkResponse, error) {
	out := new(CleanExpiredVpnLinkResponse)
	err := c.cc.Invoke(ctx, "/vpnsvc.Vpnsvc/CleanExpiredVpnLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VpnsvcServer is the server API for Vpnsvc service.
type VpnsvcServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error)
	VpnInfo(context.Context, *VpnInfoRequest) (*VpnInfoResponse, error)
	FetchOrders(context.Context, *FetchOrdersRequest) (*FetchOrdersResponse, error)
	FetchOrderInfo(context.Context, *FetchOrderInfoRequest) (*FetchOrderInfoResponse, error)
	GetServerList(context.Context, *GetServerListRequest) (*GetServerListResponse, error)
	GetServerLink(context.Context, *GetServerLinkRequest) (*GetServerLinkResponse, error)
	VerifyOrderFromChain(context.Context, *VerifyOrderFromChainRequest) (*VerifyOrderFromChainResponse, error)
	CleanExpiredVpnLink(context.Context, *CleanExpiredVpnLinkRequest) (*CleanExpiredVpnLinkResponse, error)
}

// UnimplementedVpnsvcServer can be embedded to have forward compatible implementations.
type UnimplementedVpnsvcServer struct {
}

func (*UnimplementedVpnsvcServer) CreateOrder(ctx context.Context, req *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedVpnsvcServer) UpdateOrder(ctx context.Context, req *UpdateOrderRequest) (*UpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (*UnimplementedVpnsvcServer) VpnInfo(ctx context.Context, req *VpnInfoRequest) (*VpnInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnInfo not implemented")
}
func (*UnimplementedVpnsvcServer) FetchOrders(ctx context.Context, req *FetchOrdersRequest) (*FetchOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrders not implemented")
}
func (*UnimplementedVpnsvcServer) FetchOrderInfo(ctx context.Context, req *FetchOrderInfoRequest) (*FetchOrderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrderInfo not implemented")
}
func (*UnimplementedVpnsvcServer) GetServerList(ctx context.Context, req *GetServerListRequest) (*GetServerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerList not implemented")
}
func (*UnimplementedVpnsvcServer) GetServerLink(ctx context.Context, req *GetServerLinkRequest) (*GetServerLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerLink not implemented")
}
func (*UnimplementedVpnsvcServer) VerifyOrderFromChain(ctx context.Context, req *VerifyOrderFromChainRequest) (*VerifyOrderFromChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOrderFromChain not implemented")
}
func (*UnimplementedVpnsvcServer) CleanExpiredVpnLink(ctx context.Context, req *CleanExpiredVpnLinkRequest) (*CleanExpiredVpnLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanExpiredVpnLink not implemented")
}

func RegisterVpnsvcServer(s *grpc.Server, srv VpnsvcServer) {
	s.RegisterService(&_Vpnsvc_serviceDesc, srv)
}

func _Vpnsvc_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpnsvc_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpnsvc_VpnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).VpnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/VpnInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).VpnInfo(ctx, req.(*VpnInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpnsvc_FetchOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).FetchOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/FetchOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).FetchOrders(ctx, req.(*FetchOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpnsvc_FetchOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).FetchOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/FetchOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).FetchOrderInfo(ctx, req.(*FetchOrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpnsvc_GetServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).GetServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/GetServerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).GetServerList(ctx, req.(*GetServerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpnsvc_GetServerLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).GetServerLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/GetServerLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).GetServerLink(ctx, req.(*GetServerLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpnsvc_VerifyOrderFromChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOrderFromChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).VerifyOrderFromChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/VerifyOrderFromChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).VerifyOrderFromChain(ctx, req.(*VerifyOrderFromChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpnsvc_CleanExpiredVpnLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanExpiredVpnLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnsvcServer).CleanExpiredVpnLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpnsvc.Vpnsvc/CleanExpiredVpnLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnsvcServer).CleanExpiredVpnLink(ctx, req.(*CleanExpiredVpnLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vpnsvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpnsvc.Vpnsvc",
	HandlerType: (*VpnsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _Vpnsvc_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Vpnsvc_UpdateOrder_Handler,
		},
		{
			MethodName: "VpnInfo",
			Handler:    _Vpnsvc_VpnInfo_Handler,
		},
		{
			MethodName: "FetchOrders",
			Handler:    _Vpnsvc_FetchOrders_Handler,
		},
		{
			MethodName: "FetchOrderInfo",
			Handler:    _Vpnsvc_FetchOrderInfo_Handler,
		},
		{
			MethodName: "GetServerList",
			Handler:    _Vpnsvc_GetServerList_Handler,
		},
		{
			MethodName: "GetServerLink",
			Handler:    _Vpnsvc_GetServerLink_Handler,
		},
		{
			MethodName: "VerifyOrderFromChain",
			Handler:    _Vpnsvc_VerifyOrderFromChain_Handler,
		},
		{
			MethodName: "CleanExpiredVpnLink",
			Handler:    _Vpnsvc_CleanExpiredVpnLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vpnsvc.proto",
}

func (m *CleanExpiredVpnLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CleanExpiredVpnLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *CleanExpiredVpnLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CleanExpiredVpnLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *VerifyOrderFromChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyOrderFromChainRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Chain)))
		i += copy(dAtA[i:], m.Chain)
	}
	if m.StartBlock != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.StartBlock))
	}
	return i, nil
}

func (m *VerifyOrderFromChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyOrderFromChainResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *GetServerListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.EthAddress)))
		i += copy(dAtA[i:], m.EthAddress)
	}
	return i, nil
}

func (m *GetServerListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerListItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetServerListResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerListResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, msg := range m.Servers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVpnsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetServerListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Data.Size()))
		n1, err1 := m.Data.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *GetServerLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.EthAddress)))
		i += copy(dAtA[i:], m.EthAddress)
	}
	if len(m.Server) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Server)))
		i += copy(dAtA[i:], m.Server)
	}
	return i, nil
}

func (m *GetServerLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServerLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *VpnInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VpnInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.EthAddress)))
		i += copy(dAtA[i:], m.EthAddress)
	}
	return i, nil
}

func (m *Subscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExpireTime) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.ExpireTime)))
		i += copy(dAtA[i:], m.ExpireTime)
	}
	return i, nil
}

func (m *VpnOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VpnOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Amount) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	if len(m.Chain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Chain)))
		i += copy(dAtA[i:], m.Chain)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.TxnHash) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.TxnHash)))
		i += copy(dAtA[i:], m.TxnHash)
	}
	if len(m.CreateTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.CreateTime)))
		i += copy(dAtA[i:], m.CreateTime)
	}
	return i, nil
}

func (m *VpnInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VpnInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Status))
	}
	if m.Subscription != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Subscription.Size()))
		n2, err2 := m.Subscription.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVpnsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VpnInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VpnInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Data.Size()))
		n3, err3 := m.Data.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *FetchOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.EthAddress)))
		i += copy(dAtA[i:], m.EthAddress)
	}
	return i, nil
}

func (m *FetchOrdersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchOrdersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVpnsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FetchOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Data.Size()))
		n4, err4 := m.Data.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *FetchOrderInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchOrderInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.EthAddress)))
		i += copy(dAtA[i:], m.EthAddress)
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	return i, nil
}

func (m *FetchOrderInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchOrderInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Data.Size()))
		n5, err5 := m.Data.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *CreateOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	return i, nil
}

func (m *CreateOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.EthAddress)))
		i += copy(dAtA[i:], m.EthAddress)
	}
	if m.ChainId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.ChainId))
	}
	if m.PlanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.PlanId))
	}
	return i, nil
}

func (m *CreateOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Data.Size()))
		n6, err6 := m.Data.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *UpdateOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.EthAddress)))
		i += copy(dAtA[i:], m.EthAddress)
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if len(m.TxnHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.TxnHash)))
		i += copy(dAtA[i:], m.TxnHash)
	}
	return i, nil
}

func (m *UpdateOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Code))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(m.Data.Size()))
		n7, err7 := m.Data.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpnsvc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeVarintVpnsvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CleanExpiredVpnLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndTime != 0 {
		n += 1 + sovVpnsvc(uint64(m.EndTime))
	}
	return n
}

func (m *CleanExpiredVpnLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *VerifyOrderFromChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovVpnsvc(uint64(m.StartBlock))
	}
	return n
}

func (m *VerifyOrderFromChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *GetServerListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *GetServerListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *GetServerListResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovVpnsvc(uint64(l))
		}
	}
	return n
}

func (m *GetServerListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *GetServerLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *GetServerLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *VpnInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *Subscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *VpnOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.TxnHash)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *VpnInfoResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovVpnsvc(uint64(m.Status))
	}
	if m.Subscription != nil {
		l = m.Subscription.Size()
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovVpnsvc(uint64(l))
		}
	}
	return n
}

func (m *VpnInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *FetchOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *FetchOrdersResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovVpnsvc(uint64(l))
		}
	}
	return n
}

func (m *FetchOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *FetchOrderInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *FetchOrderInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *CreateOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *CreateOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovVpnsvc(uint64(m.ChainId))
	}
	if m.PlanId != 0 {
		n += 1 + sovVpnsvc(uint64(m.PlanId))
	}
	return n
}

func (m *CreateOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *UpdateOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	return n
}

func (m *UpdateOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.TxnHash)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func (m *UpdateOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVpnsvc(uint64(m.Code))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVpnsvc(uint64(l))
	}
	return n
}

func sovVpnsvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVpnsvc(x uint64) (n int) {
	return sovVpnsvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CleanExpiredVpnLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CleanExpiredVpnLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CleanExpiredVpnLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CleanExpiredVpnLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CleanExpiredVpnLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CleanExpiredVpnLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyOrderFromChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyOrderFromChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyOrderFromChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyOrderFromChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyOrderFromChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyOrderFromChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerListResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerListResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerListResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &GetServerListItem{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &GetServerListResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServerLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServerLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServerLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VpnInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VpnInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VpnInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VpnOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VpnOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VpnOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxnHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VpnInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VpnInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VpnInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscription == nil {
				m.Subscription = &Subscription{}
			}
			if err := m.Subscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &VpnOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VpnInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VpnInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VpnInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &VpnInfoResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchOrdersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchOrdersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchOrdersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &VpnOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FetchOrdersResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchOrderInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchOrderInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchOrderInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchOrderInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchOrderInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchOrderInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &VpnOrder{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CreateOrderResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxnHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UpdateOrderResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVpnsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpnsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVpnsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVpnsvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVpnsvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVpnsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVpnsvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVpnsvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVpnsvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVpnsvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVpnsvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVpnsvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVpnsvc   = fmt.Errorf("proto: integer overflow")
)
