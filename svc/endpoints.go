// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: a2b01cac16
// Version Date: 2022-10-20T18:44:52Z

package svc

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/endpoint"

	pb "github.com/mises-id/mises-vpnsvc/proto"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
	CreateOrderEndpoint          endpoint.Endpoint
	UpdateOrderEndpoint          endpoint.Endpoint
	VpnInfoEndpoint              endpoint.Endpoint
	FetchOrdersEndpoint          endpoint.Endpoint
	FetchOrderInfoEndpoint       endpoint.Endpoint
	GetServerListEndpoint        endpoint.Endpoint
	GetServerLinkEndpoint        endpoint.Endpoint
	VerifyOrderFromChainEndpoint endpoint.Endpoint
	CleanExpiredVpnLinkEndpoint  endpoint.Endpoint
	GetVpnConfigEndpoint         endpoint.Endpoint
}

// Endpoints

func (e Endpoints) CreateOrder(ctx context.Context, in *pb.CreateOrderRequest) (*pb.CreateOrderResponse, error) {
	response, err := e.CreateOrderEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.CreateOrderResponse), nil
}

func (e Endpoints) UpdateOrder(ctx context.Context, in *pb.UpdateOrderRequest) (*pb.UpdateOrderResponse, error) {
	response, err := e.UpdateOrderEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UpdateOrderResponse), nil
}

func (e Endpoints) VpnInfo(ctx context.Context, in *pb.VpnInfoRequest) (*pb.VpnInfoResponse, error) {
	response, err := e.VpnInfoEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.VpnInfoResponse), nil
}

func (e Endpoints) FetchOrders(ctx context.Context, in *pb.FetchOrdersRequest) (*pb.FetchOrdersResponse, error) {
	response, err := e.FetchOrdersEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.FetchOrdersResponse), nil
}

func (e Endpoints) FetchOrderInfo(ctx context.Context, in *pb.FetchOrderInfoRequest) (*pb.FetchOrderInfoResponse, error) {
	response, err := e.FetchOrderInfoEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.FetchOrderInfoResponse), nil
}

func (e Endpoints) GetServerList(ctx context.Context, in *pb.GetServerListRequest) (*pb.GetServerListResponse, error) {
	response, err := e.GetServerListEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GetServerListResponse), nil
}

func (e Endpoints) GetServerLink(ctx context.Context, in *pb.GetServerLinkRequest) (*pb.GetServerLinkResponse, error) {
	response, err := e.GetServerLinkEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GetServerLinkResponse), nil
}

func (e Endpoints) VerifyOrderFromChain(ctx context.Context, in *pb.VerifyOrderFromChainRequest) (*pb.VerifyOrderFromChainResponse, error) {
	response, err := e.VerifyOrderFromChainEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.VerifyOrderFromChainResponse), nil
}

func (e Endpoints) CleanExpiredVpnLink(ctx context.Context, in *pb.CleanExpiredVpnLinkRequest) (*pb.CleanExpiredVpnLinkResponse, error) {
	response, err := e.CleanExpiredVpnLinkEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.CleanExpiredVpnLinkResponse), nil
}

func (e Endpoints) GetVpnConfig(ctx context.Context, in *pb.GetVpnConfigRequest) (*pb.GetVpnConfigResponse, error) {
	response, err := e.GetVpnConfigEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GetVpnConfigResponse), nil
}

// Make Endpoints

func MakeCreateOrderEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.CreateOrderRequest)
		v, err := s.CreateOrder(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeUpdateOrderEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UpdateOrderRequest)
		v, err := s.UpdateOrder(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeVpnInfoEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.VpnInfoRequest)
		v, err := s.VpnInfo(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeFetchOrdersEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.FetchOrdersRequest)
		v, err := s.FetchOrders(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeFetchOrderInfoEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.FetchOrderInfoRequest)
		v, err := s.FetchOrderInfo(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetServerListEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.GetServerListRequest)
		v, err := s.GetServerList(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetServerLinkEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.GetServerLinkRequest)
		v, err := s.GetServerLink(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeVerifyOrderFromChainEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.VerifyOrderFromChainRequest)
		v, err := s.VerifyOrderFromChain(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeCleanExpiredVpnLinkEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.CleanExpiredVpnLinkRequest)
		v, err := s.CleanExpiredVpnLink(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetVpnConfigEndpoint(s pb.VpnsvcServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.GetVpnConfigRequest)
		v, err := s.GetVpnConfig(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		"CreateOrder":          {},
		"UpdateOrder":          {},
		"VpnInfo":              {},
		"FetchOrders":          {},
		"FetchOrderInfo":       {},
		"GetServerList":        {},
		"GetServerLink":        {},
		"VerifyOrderFromChain": {},
		"CleanExpiredVpnLink":  {},
		"GetVpnConfig":         {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "CreateOrder" {
			e.CreateOrderEndpoint = middleware(e.CreateOrderEndpoint)
		}
		if inc == "UpdateOrder" {
			e.UpdateOrderEndpoint = middleware(e.UpdateOrderEndpoint)
		}
		if inc == "VpnInfo" {
			e.VpnInfoEndpoint = middleware(e.VpnInfoEndpoint)
		}
		if inc == "FetchOrders" {
			e.FetchOrdersEndpoint = middleware(e.FetchOrdersEndpoint)
		}
		if inc == "FetchOrderInfo" {
			e.FetchOrderInfoEndpoint = middleware(e.FetchOrderInfoEndpoint)
		}
		if inc == "GetServerList" {
			e.GetServerListEndpoint = middleware(e.GetServerListEndpoint)
		}
		if inc == "GetServerLink" {
			e.GetServerLinkEndpoint = middleware(e.GetServerLinkEndpoint)
		}
		if inc == "VerifyOrderFromChain" {
			e.VerifyOrderFromChainEndpoint = middleware(e.VerifyOrderFromChainEndpoint)
		}
		if inc == "CleanExpiredVpnLink" {
			e.CleanExpiredVpnLinkEndpoint = middleware(e.CleanExpiredVpnLinkEndpoint)
		}
		if inc == "GetVpnConfig" {
			e.GetVpnConfigEndpoint = middleware(e.GetVpnConfigEndpoint)
		}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeldMiddleware. See method WrapAllExept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		"CreateOrder":          {},
		"UpdateOrder":          {},
		"VpnInfo":              {},
		"FetchOrders":          {},
		"FetchOrderInfo":       {},
		"GetServerList":        {},
		"GetServerLink":        {},
		"VerifyOrderFromChain": {},
		"CleanExpiredVpnLink":  {},
		"GetVpnConfig":         {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "CreateOrder" {
			e.CreateOrderEndpoint = middleware("CreateOrder", e.CreateOrderEndpoint)
		}
		if inc == "UpdateOrder" {
			e.UpdateOrderEndpoint = middleware("UpdateOrder", e.UpdateOrderEndpoint)
		}
		if inc == "VpnInfo" {
			e.VpnInfoEndpoint = middleware("VpnInfo", e.VpnInfoEndpoint)
		}
		if inc == "FetchOrders" {
			e.FetchOrdersEndpoint = middleware("FetchOrders", e.FetchOrdersEndpoint)
		}
		if inc == "FetchOrderInfo" {
			e.FetchOrderInfoEndpoint = middleware("FetchOrderInfo", e.FetchOrderInfoEndpoint)
		}
		if inc == "GetServerList" {
			e.GetServerListEndpoint = middleware("GetServerList", e.GetServerListEndpoint)
		}
		if inc == "GetServerLink" {
			e.GetServerLinkEndpoint = middleware("GetServerLink", e.GetServerLinkEndpoint)
		}
		if inc == "VerifyOrderFromChain" {
			e.VerifyOrderFromChainEndpoint = middleware("VerifyOrderFromChain", e.VerifyOrderFromChainEndpoint)
		}
		if inc == "CleanExpiredVpnLink" {
			e.CleanExpiredVpnLinkEndpoint = middleware("CleanExpiredVpnLink", e.CleanExpiredVpnLinkEndpoint)
		}
		if inc == "GetVpnConfig" {
			e.GetVpnConfigEndpoint = middleware("GetVpnConfig", e.GetVpnConfigEndpoint)
		}
	}
}
