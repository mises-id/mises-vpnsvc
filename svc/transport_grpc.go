// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: a2b01cac16
// Version Date: 2022-10-20T18:44:52Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/mises-vpnsvc/proto"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC VpnsvcServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.VpnsvcServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// vpnsvc

		createorder: grpctransport.NewServer(
			endpoints.CreateOrderEndpoint,
			DecodeGRPCCreateOrderRequest,
			EncodeGRPCCreateOrderResponse,
			serverOptions...,
		),
		updateorder: grpctransport.NewServer(
			endpoints.UpdateOrderEndpoint,
			DecodeGRPCUpdateOrderRequest,
			EncodeGRPCUpdateOrderResponse,
			serverOptions...,
		),
		vpninfo: grpctransport.NewServer(
			endpoints.VpnInfoEndpoint,
			DecodeGRPCVpnInfoRequest,
			EncodeGRPCVpnInfoResponse,
			serverOptions...,
		),
		fetchorders: grpctransport.NewServer(
			endpoints.FetchOrdersEndpoint,
			DecodeGRPCFetchOrdersRequest,
			EncodeGRPCFetchOrdersResponse,
			serverOptions...,
		),
		fetchorderinfo: grpctransport.NewServer(
			endpoints.FetchOrderInfoEndpoint,
			DecodeGRPCFetchOrderInfoRequest,
			EncodeGRPCFetchOrderInfoResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the VpnsvcServer interface
type grpcServer struct {
	createorder    grpctransport.Handler
	updateorder    grpctransport.Handler
	vpninfo        grpctransport.Handler
	fetchorders    grpctransport.Handler
	fetchorderinfo grpctransport.Handler
}

// Methods for grpcServer to implement VpnsvcServer interface

func (s *grpcServer) CreateOrder(ctx context.Context, req *pb.CreateOrderRequest) (*pb.CreateOrderResponse, error) {
	_, rep, err := s.createorder.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.CreateOrderResponse), nil
}

func (s *grpcServer) UpdateOrder(ctx context.Context, req *pb.UpdateOrderRequest) (*pb.UpdateOrderResponse, error) {
	_, rep, err := s.updateorder.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UpdateOrderResponse), nil
}

func (s *grpcServer) VpnInfo(ctx context.Context, req *pb.VpnInfoRequest) (*pb.VpnInfoResponse, error) {
	_, rep, err := s.vpninfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.VpnInfoResponse), nil
}

func (s *grpcServer) FetchOrders(ctx context.Context, req *pb.FetchOrdersRequest) (*pb.FetchOrdersResponse, error) {
	_, rep, err := s.fetchorders.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.FetchOrdersResponse), nil
}

func (s *grpcServer) FetchOrderInfo(ctx context.Context, req *pb.FetchOrderInfoRequest) (*pb.FetchOrderInfoResponse, error) {
	_, rep, err := s.fetchorderinfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.FetchOrderInfoResponse), nil
}

// Server Decode

// DecodeGRPCCreateOrderRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC createorder request to a user-domain createorder request. Primarily useful in a server.
func DecodeGRPCCreateOrderRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateOrderRequest)
	return req, nil
}

// DecodeGRPCUpdateOrderRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC updateorder request to a user-domain updateorder request. Primarily useful in a server.
func DecodeGRPCUpdateOrderRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateOrderRequest)
	return req, nil
}

// DecodeGRPCVpnInfoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC vpninfo request to a user-domain vpninfo request. Primarily useful in a server.
func DecodeGRPCVpnInfoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.VpnInfoRequest)
	return req, nil
}

// DecodeGRPCFetchOrdersRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC fetchorders request to a user-domain fetchorders request. Primarily useful in a server.
func DecodeGRPCFetchOrdersRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.FetchOrdersRequest)
	return req, nil
}

// DecodeGRPCFetchOrderInfoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC fetchorderinfo request to a user-domain fetchorderinfo request. Primarily useful in a server.
func DecodeGRPCFetchOrderInfoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.FetchOrderInfoRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCCreateOrderResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain createorder response to a gRPC createorder reply. Primarily useful in a server.
func EncodeGRPCCreateOrderResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.CreateOrderResponse)
	return resp, nil
}

// EncodeGRPCUpdateOrderResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain updateorder response to a gRPC updateorder reply. Primarily useful in a server.
func EncodeGRPCUpdateOrderResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UpdateOrderResponse)
	return resp, nil
}

// EncodeGRPCVpnInfoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain vpninfo response to a gRPC vpninfo reply. Primarily useful in a server.
func EncodeGRPCVpnInfoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.VpnInfoResponse)
	return resp, nil
}

// EncodeGRPCFetchOrdersResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain fetchorders response to a gRPC fetchorders reply. Primarily useful in a server.
func EncodeGRPCFetchOrdersResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.FetchOrdersResponse)
	return resp, nil
}

// EncodeGRPCFetchOrderInfoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain fetchorderinfo response to a gRPC fetchorderinfo reply. Primarily useful in a server.
func EncodeGRPCFetchOrderInfoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.FetchOrderInfoResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
